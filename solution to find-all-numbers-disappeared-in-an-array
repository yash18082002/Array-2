// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// take a number from the array. Go to its index position. If the element is positive, mmultiply it by -1. traverse the array again. If an element is positive, add its index to the list. Return the list.

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        if(nums == null || nums.length == 0) {
            return new ArrayList<>();
        }
        List<Integer> result = new ArrayList<>();
        for(int i = 0; i < nums.length; i++) {
            int temp = Math.abs(nums[i]) - 1;
            if(nums[temp] > 0) {
                nums[temp] = nums[temp] * -1;
            }
        }
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] > 0) {
                result.add(i + 1);
            } else {
                nums[i] = nums[i] * -1;
            }
        }
        return result;
    }
}
