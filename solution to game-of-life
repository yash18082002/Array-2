// Time Complexity : O(m*n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// check the conditions for each element. if the state is changed, modify the value to 2 or 3 as specified in the code. then change the 2 and 3s back to 0 and 1s.

class Solution {
    int m, n;
    public void gameOfLife(int[][] board) {
        if(board == null || board.length == 0) {
            return;
        }
        m = board.length;
        n = board[0].length;
        // live -> dead = 2
        // dead -> live = 3
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                int liveNeighbors = countLiveNeighbors(board, i, j);
                if(board[i][j] == 1) {
                    if(liveNeighbors < 2 || liveNeighbors > 3) {
                        board[i][j] = 2;
                    }
                } else {
                    if(liveNeighbors == 3) {
                        board[i][j] = 3;
                    }
                }
            }
        }
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == 2) {
                    board[i][j] = 0;
                } else if(board[i][j] == 3) {
                    board[i][j] = 1;
                }
            }
        }
    }
    private int countLiveNeighbors(int[][] board, int row, int col) {
        int count = 0;
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        for(int[] dir : dirs) {
            int nr = row + dir[0];
            int nc = col + dir[1];
            if(nr >= 0 && nr < m && nc >= 0 && nc < n && (board[nr][nc] == 1 || board[nr][nc] == 2)) {
                count++;
            }
        }
        return count;
    }
}
